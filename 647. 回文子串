//动态规划
int countSubstrings(char * s){
    int len = strlen(s);
    int cnt = 0;
    int dp[len][len];
    memset(dp, 0, sizeof(dp));
    for(int j=0; j<len; j++)
    {
        for(int i=0; i<=j; i++)
        {
            if(i==j)
            {
                dp[i][j] = 1;
            }
            else if(j-i == 1)
            {
                dp[i][j] = (s[i]==s[j]);
            }
            else{
                dp[i][j] = dp[i+1][j-1] && (s[i]==s[j]);

            }     
            if(dp[i][j]==1)
            {
                 cnt++;
            }
        }
    }
    return cnt;
}
——————————————————————————————————————————————————————————————————————
//中心扩展
int count(char *s, int len, int left, int right)
{
    int k=0;
    while(left>=0 && right<len && s[left]==s[right])
    {
        left--;
        right++;
        k++;
    }
    return k;
}
int countSubstrings(char * s){
    int len = strlen(s);
    int num = 0;
    for(int i=0; i<len; i++)
    {
        num += count(s, len, i, i);
        num += count(s, len, i, i+1);
    }
    return num;
}
