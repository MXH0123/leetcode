//中心扩展，分奇偶子串两种情况
int *expandPalindrome(char *s, int len, int left, int right)
{
    
    while(left>=0 && right<len )
    {
        if(s[left]==s[right])
        {
            left--;
            right++;
        }
        else
        {
            break;
        }
    }
    int *res = (int *)malloc(sizeof(int)*3);
    res[0]=left+1, res[1]=right-1, res[2]=right-left-1;
    return res;
 
}

char * longestPalindrome(char * s){
    int len = strlen(s);
    if(len==0)
    {
        return "";
    }
    char *str;
    int maxstrlen = 1, start=0, end=0;
    for(int i=0; i<len; i++)
    {
        int *res1 = expandPalindrome(s, len, i, i);//子串为奇数
        int *res2 = expandPalindrome(s, len, i, i+1);//子串为偶数
        //printf("%d\n", *res1);
        if(*(res1+2)>maxstrlen)
        {
           maxstrlen = *(res1+2);
           start = *(res1);
           end = *(res1+1);
        }
        if(res2[2]>maxstrlen)
        {
            maxstrlen = res2[2];
            start = res2[0];
            end = res2[1];
        }
    }
    str = malloc(sizeof(char)*(maxstrlen+1));
    strncpy(str, s+start, maxstrlen);
    str[maxstrlen] = '\0';

    return str;
}
——————————————————————————————————————————————————————————————————————————————
//动态规划 转移方程 dp[i][j] = dp[i+1][j-1]&&(s[i]==s[j]) 
//如子串ababa dp[2][2]=1, 表示子串a, dp[1][3] = dp[2][2]&&(s[1]==s[3]) //dp[1][3] = 1，表示子串从1到3为回文子串
char * longestPalindrome(char * s){
    int len = strlen(s);
    if(len<2)
    {
        return s;
    }
    int dp[len][len];
    memset(dp, 0, sizeof(dp));
    int maxlen=1;
    int start=0, end=0;
    for(int j=0; j<len; j++)
    {
        for(int i=0; i<=j; i++)
        {
            if(i==j)
            {
                dp[i][j] = 1;
            }
            else if(j-i == 1)
            {
                dp[i][j] = (s[i]==s[j]);
            }
            else{
                dp[i][j] = dp[i+1][j-1]&&(s[i]==s[j]);
            }
            if(dp[i][j]==1)
            {
                int tmp = j-i+1;
                if(maxlen<tmp)
                {
                    maxlen = tmp;
                    start = i;
                    end = j;
                }
            }
        }
    }
    char *str = (char *)malloc(sizeof(char)*(maxlen+1));
    strncpy(str, s+start, maxlen);
    str[maxlen] = '\0';
    return str;
}

